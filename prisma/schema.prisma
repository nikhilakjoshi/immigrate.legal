// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String?
  role          UserRole  @default(LAWYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  cases         Case[]
  assignedTasks Task[]
  
  // NextAuth fields
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Client model
model Client {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  address     String?
  dateOfBirth DateTime?
  nationality String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  cases       Case[]

  @@map("clients")
}

// Template model for different visa types
model Template {
  id          String       @id @default(cuid())
  name        String
  type        VisaType
  description String?
  workflow    Json?        // Store workflow configuration
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  cases       Case[]
  tasks       TaskTemplate[]

  @@map("templates")
}

// Case model
model Case {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       CaseStatus @default(OPEN)
  priority     Priority   @default(MEDIUM)
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Foreign keys
  clientId     String
  lawyerId     String
  templateId   String?
  
  // Relations
  client       Client     @relation(fields: [clientId], references: [id])
  lawyer       User       @relation(fields: [lawyerId], references: [id])
  template     Template?  @relation(fields: [templateId], references: [id])
  tasks        Task[]
  documents    Document[]

  @@map("cases")
}

// Task model
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  order       Int?       // For workflow ordering
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Foreign keys
  caseId      String
  assigneeId  String?
  templateId  String?
  
  // Relations
  case        Case         @relation(fields: [caseId], references: [id], onDelete: Cascade)
  assignee    User?        @relation(fields: [assigneeId], references: [id])
  template    TaskTemplate? @relation(fields: [templateId], references: [id])
  documents   Document[]

  @@map("tasks")
}

// Task template for reusable workflows
model TaskTemplate {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int?
  isRequired  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign keys
  templateId  String
  
  // Relations
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("task_templates")
}

// Document model
model Document {
  id        String      @id @default(cuid())
  name      String
  type      DocumentType
  filePath  String
  size      Int?
  mimeType  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Foreign keys
  caseId    String?
  taskId    String?
  
  // Relations
  case      Case?       @relation(fields: [caseId], references: [id])
  task      Task?       @relation(fields: [taskId], references: [id])

  @@map("documents")
}

// Enums
enum UserRole {
  ADMIN
  LAWYER
  PARALEGAL
  CLIENT
}

enum VisaType {
  EB1A
  NIW
  H1B
  L1
  O1
  TN
  E2
  OTHER
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  DENIED
  CLOSED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  FORM
  EVIDENCE
  CORRESPONDENCE
  LEGAL_BRIEF
  CONTRACT
  IDENTIFICATION
  FINANCIAL
  OTHER
}
